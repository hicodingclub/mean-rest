import { Router, ActivatedRoute } from '@angular/router';
import { Injector, EventEmitter } from '@angular/core';
import { Location } from '@angular/common';
import { BaseService, ServiceError } from './base.service';
import { MraCommonService } from './common.service';
import { BaseComponentInterface } from './base.interface';
export declare enum ViewType {
    LIST = 0,
    DETAIL = 1,
    EDIT = 2
}
export { ServiceError };
export declare class BaseComponent implements BaseComponentInterface {
    protected service: BaseService;
    protected injector: Injector;
    protected router: Router;
    protected route: ActivatedRoute;
    protected location: Location;
    protected view: ViewType;
    protected itemCamelName: string;
    protected objectKeys: (o: {}) => string[];
    private storage;
    protected list: any[];
    protected majorUi: boolean;
    protected eventEmitter: EventEmitter<any>;
    protected page: number;
    protected per_page: number;
    protected total_count: number;
    protected total_pages: number;
    private new_page;
    protected pages: number[];
    protected left_more: boolean;
    protected right_more: boolean;
    protected checkAll: boolean;
    protected checkedItem: boolean[];
    protected detail: any;
    private _detail;
    private _extra;
    protected id: string;
    protected subEdit: boolean;
    protected enums: any;
    protected stringFields: any[];
    protected referenceFields: string[];
    protected referenceFieldsMap: {};
    protected dateFields: any[];
    protected indexFields: any[];
    protected multiSelectionFields: any[];
    protected arrayFields: any[];
    protected mapFields: any[];
    protected dateFormat: string;
    protected timeFormat: string;
    protected hiddenFields: any[];
    protected ItemCamelName: string;
    protected itemName: string;
    protected parentItem: string;
    protected refreshing: boolean;
    protected commonService: MraCommonService;
    constructor(service: BaseService, injector: Injector, router: Router, route: ActivatedRoute, location: Location, view: ViewType, itemCamelName: string);
    protected onServiceError(error: ServiceError): void;
    protected populatePages(): void;
    private getKey;
    private putToStorage;
    private getFromStorage;
    private routeToPage;
    protected onNextPage(): void;
    protected onPreviousPage(): void;
    protected onGotoPage(p: number): void;
    protected goBack(): void;
    protected stringify(detail: any): string;
    /***Start: handle reference fields***/
    protected formatReferenceField(field: any, fieldName: string): any;
    protected formatReference(detail: any): any;
    protected deFormatReference(detail: any): any;
    protected clearFieldReference(field: any): any;
    protected isDefinedFieldReference(field: any): any;
    /***Start: handle date fields***/
    protected formatDateField(field: string): any;
    protected formatDate(detail: any): any;
    protected deFormatDateField(date: any): string;
    protected deFormatDate(detail: any): any;
    protected clearFieldDate(field: any): any;
    protected isDefinedFieldDate(field: any): any;
    /***Start: handle array of multi-selection fields***/
    protected formatArrayMultiSelectionField(field: any, enums: any): any;
    protected formatArrayMultiSelection(detail: any): any;
    protected deFormatArrayMultiSelection(detail: any): any;
    protected clearFieldArrayMultiSelection(field: any): any;
    protected isDefinedFieldArrayMultiSelection(field: any): any;
    protected multiselectionSelected(fieldName: any): any;
    /***End: handle array of multi-selection fields***/
    /***Start: handle map fields***/
    protected formatMapField(field: any, elementType: string): any;
    protected formatMapFields(detail: any): any;
    protected deFormatMapFields(detail: any): any;
    protected clearFieldMap(field: any): any;
    protected isDefinedFieldMap(field: any): any;
    protected mapSelected(fieldName: any): any;
    /***End: handle map fields***/
    /***Start: handle array fields***/
    protected formatArrayField(field: any, elementType: string): any;
    protected formatArrayFields(detail: any): any;
    protected deFormatArrayFields(detail: any): any;
    protected clearFieldArray(field: any): any;
    protected isDefinedFieldArray(field: any): any;
    protected arraySelected(fieldName: any): any;
    /***End: handle array fields***/
    protected formatDetail(detail: any): any;
    protected deFormatDetail(detail: any): any;
    protected populateDetail(id: string): EventEmitter<any>;
    protected populateDetailForAction(id: string, action: string): EventEmitter<any>;
    protected populateDetailFromCopy(copy_id: string): void;
    protected extraInfoPopulate(): void;
    private equalTwoSearchContextArrays;
    protected processSearchContext(): void;
    protected searchList(): void;
    protected loadUIFromCache(): void;
    protected populateList(): EventEmitter<any>;
    onRefresh(): void;
    onCheckAllChange(): void;
    isItemSelected(): boolean;
    onDeleteSelected(): void;
    onDelete(id: string, idx: number): void;
    onSubmit(): void;
    editCancel(): void;
    protected clickedId: any;
    onDisplayRefClicked(fn: string, detail: any, event: any): void;
    onDetailLinkClicked(id: string): void;
    protected getRefFromField(fn: string): string;
    clearValueFromDetail(field: string): void;
    clearValueFromArrayField(field: string, idx: number): void;
    clearValueFromMapField(field: string, key: string): void;
    clearValueFromMapKey(field: string, key: string): void;
    checkValueDefinedFromDetail(field: string): boolean;
    clearValueFromDetailAndSearchList(field: string): void;
    onAddArrayItem(fieldName: string): void;
    onAddMapItem(fieldName: string): void;
    protected refSelectDirective: any;
    protected selectComponents: any;
    protected componentFactoryResolver: any;
    private componentSubscription;
    onRefSelect(fieldName: string): void;
    onRefShow(fieldName: string, action: string, id: string): void;
    inputData: any;
    outputData: any;
    done: any;
    protected focusEl: any;
    setFocus(): void;
    uiCloseModal(): void;
    uiOnEscapeKey(): void;
    protected selectedId: any;
    selectItemSelected(num: number): void;
    detailSelSelected(): void;
    selectViewDetail(num: number): void;
    detailSelBack(): void;
    protected searchText: string;
    protected searchMoreDetail: any;
    moreSearchOpened: boolean;
    toggleMoreSearch(): void;
    onSearchTextClear(): void;
    onSearchClear(): void;
    protected textEditors: any;
    protected textEditorMap: any;
    protected extraFieldsUnload(): void;
    protected extraFieldsLoad(): boolean;
    onEdtiorPreview(editorName: string): void;
    protected getParentRouteItem(): string;
    protected getParentRouteItemId(): string;
    protected getParentRouteRefField(): string;
    protected getParentActivatedRouter(): ActivatedRoute;
    toggleCheckedItem(i: number): void;
    /*** Any View - add new component in the current view*/
    protected isAdding: boolean;
    onAdd(): void;
    toggleAdd(): void;
    onAddDone(result: boolean): void;
    hoveredDate: any;
    onDateSelectionToggle(fn: string): void;
    onDateSelection(fn: string, date: any): void;
    isHovered(fn: string, date: any): any;
    isInside(fn: string, date: any): any;
    isRange(fn: string, date: any): any;
}
